package Generics;

public class ListNode<T> {
	protected T data;
	protected ListNode<T> nextNode;
	
	protected ListNode(){
		this(null);
	}
	
	protected ListNode(T Object){
		this(Object, null);
	}
	
	protected ListNode(T Object, ListNode<T> node){
		data = Object;
		nextNode = node;
	}
	
	protected T getData() {
		return data;
	}
	
	protected ListNode<T> getNext(){
		return nextNode;
	}
}

package Generics;

public class List<T> {
	private ListNode<T> firstNode;
	private ListNode<T> lastNode;
	private String name;
	
	public List() {
		this("list");
	}
	
	public List(String listname) {
		name = listname;
		firstNode = lastNode = null;
	}
	
	public void insertAtFront(T insertItem) {
		if(isEmpty()){
			firstNode = lastNode = new ListNode<T>(insertItem);
		}else {
			firstNode = new ListNode<T>(insertItem, firstNode);
		}
	}
	
	public void insertAtBack(T insertItem) {
		if(isEmpty()) {
			firstNode = lastNode = new ListNode<T>(insertItem);
		}else {
			lastNode = lastNode.nextNode = new ListNode<T>(insertItem);
		}
	}
	
	public T removeFromFront() throws EmptyListException{
		if(isEmpty()) {
			throw new EmptyListException(name);
		}
		T removedItem = firstNode.data;
		if(firstNode == lastNode) {
			firstNode = lastNode = null;
		}else {
			firstNode = firstNode.nextNode;
		}
		return removedItem;
	}
	
	public T removeFromBack() throws EmptyListException{
		if(isEmpty()) {
			throw new EmptyListException(name);
		}
		T removedItem = lastNode.data;
		if(firstNode == lastNode) {
			firstNode = lastNode = null;
		}else {
			ListNode<T> current = firstNode;
			while(current.nextNode != lastNode) {
				current = current.nextNode;
			}
			lastNode = current;
			current.nextNode = null;
		}
		return removedItem;
	}
	
	public boolean isEmpty() {
		return firstNode == null;
	}
	
	public void print() {
		if(isEmpty()) {
			System.out.printf("Empty %s\n", name);
			return;
		}
		
		System.out.printf("The %s is: ", name);
		ListNode<T> current = firstNode;
		while(current != null) {
			System.out.printf("%s ", current.data);
			current = current.nextNode;
		}
		System.out.println();
	}
}

package Generics;

public class EmptyListException extends Throwable{
	public EmptyListException() {
		this("List");
	}
	
	public EmptyListException(String name) {
		super(name + " is empty");
	}
}

package Generics;

public class ListTest {
	public static void main(String[]args) {
		List<String> stringList = new List<String>();
		List<Integer> integerList = new List<Integer>();
		List<Double> doubleList = new List<Double>();
		
		stringList.insertAtFront("adriano");
		stringList.insertAtFront("adinho");
		stringList.insertAtBack("fabrinho");
		stringList.insertAtBack("herginho");
		stringList.print();
		
		System.out.println();
		
		integerList.insertAtFront(4);
		integerList.insertAtBack(7);
		integerList.insertAtBack(9);
		integerList.insertAtFront(1);
		integerList.print();
		
		System.out.println();
		
		doubleList.insertAtBack(2.4);
		doubleList.insertAtFront(5.1);
		doubleList.insertAtBack(6.2);
		doubleList.insertAtFront(8.9);
		doubleList.print();
		
		try {
			String removedItem = stringList.removeFromFront();
			System.out.printf("\n%s removed\n",removedItem);
			removedItem = stringList.removeFromBack();
			System.out.printf("%s removed\n", removedItem);
			stringList.print();
			
			System.out.println();
			
			int removeItem = integerList.removeFromFront();
			System.out.printf("\n%d removed\n", removeItem);
			removeItem = integerList.removeFromBack();
			System.out.printf("%d removed\n", removeItem);
			integerList.print();
			
			System.out.println();
			
			double removingItem = doubleList.removeFromFront();
			System.out.printf("\n%.1f removed\n", removingItem);
			removingItem = doubleList.removeFromBack();
			System.out.printf("%.1f removed\n", removingItem);
			doubleList.print();
		}catch(EmptyListException emptyListException) {
			System.err.println();
			emptyListException.printStackTrace();
		}
	}
}
